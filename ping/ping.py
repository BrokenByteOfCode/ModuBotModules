import time
import psutil
import platform
from datetime import datetime
from pyrogram import Client, filters
from pyrogram.handlers import MessageHandler

BOT_START_TIME = datetime.now()

def get_bot_uptime():
    return str(datetime.now() - BOT_START_TIME).split('.')[0]

async def ping_command(client, message):
    start_time = time.time()
    response = await message.reply_text("üèì Pong!")
    end_time = time.time()
    
    response_time = (end_time - start_time) * 1000
    cpu_percent = psutil.cpu_percent()
    memory = psutil.virtual_memory()
    
    ping_text = f"""
üèì **Pong!**

‚ö°Ô∏è **–í—ñ–¥–≥—É–∫:** `{response_time:.2f} ms`
üíª **CPU:** `{cpu_percent}%`
üß† **RAM:** `{memory.percent}%`
‚è∞ **–ê–ø—Ç–∞–π–º –±–æ—Ç–∞:** `{get_bot_uptime()}`
"""
    await response.edit_text(ping_text)

async def fast_ping_command(client, message):
    start_time = time.time()
    response = await message.reply_text("üèì")
    end_time = time.time()
    
    response_time = (end_time - start_time) * 1000
    await response.edit_text(f"üèì **{response_time:.2f} ms**")

async def detailed_ping_command(client, message):
    start_time = time.time()
    response = await message.reply_text("üîç –ó–±–∏—Ä–∞—é –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é...")
    
    cpu_percent = psutil.cpu_percent(interval=1)
    cpu_freq = psutil.cpu_freq()
    memory = psutil.virtual_memory()
    disk = psutil.disk_usage('/')
    boot_time = datetime.fromtimestamp(psutil.boot_time())
    system_uptime = datetime.now() - boot_time
    
    net_io = psutil.net_io_counters()
    
    end_time = time.time()
    response_time = (end_time - start_time) * 1000
    
    freq_text = f"`{cpu_freq.current:.0f} MHz`" if cpu_freq else "`N/A`"

    detailed_text = f"""
üîç **–î–µ—Ç–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏**

‚ö°Ô∏è **–í—ñ–¥–≥—É–∫:** `{response_time:.2f} ms`

**–°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ **OS:** `{platform.system()} {platform.release()}`
‚Ä¢ **–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞:** `{platform.architecture()[0]}`
‚Ä¢ **–ê–ø—Ç–∞–π–º —Å–∏—Å—Ç–µ–º–∏:** `{str(system_uptime).split('.')[0]}`
‚Ä¢ **–ê–ø—Ç–∞–π–º –±–æ—Ç–∞:** `{get_bot_uptime()}`

**–ü—Ä–æ—Ü–µ—Å–æ—Ä (CPU):**
‚Ä¢ **–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:** `{cpu_percent}%`
‚Ä¢ **–Ø–¥—Ä–∞:** `{psutil.cpu_count(logical=False)} —Ñ—ñ–∑–∏—á–Ω–∏—Ö / {psutil.cpu_count(logical=True)} –ª–æ–≥—ñ—á–Ω–∏—Ö`
‚Ä¢ **–ß–∞—Å—Ç–æ—Ç–∞:** {freq_text}

**–ü–∞–º'—è—Ç—å (RAM):**
‚Ä¢ **–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ:** `{memory.used // 1024**2} MB / {memory.total // 1024**2} MB ({memory.percent}%)`

**–î–∏—Å–∫:**
‚Ä¢ **–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ:** `{disk.used // 1024**3} GB / {disk.total // 1024**3} GB ({disk.percent}%)`

**–ú–µ—Ä–µ–∂–∞:**
‚Ä¢ **–ù–∞–¥—ñ—Å–ª–∞–Ω–æ:** `{net_io.bytes_sent / 1024**2:.2f} MB`
‚Ä¢ **–û—Ç—Ä–∏–º–∞–Ω–æ:** `{net_io.bytes_recv / 1024**2:.2f} MB`
"""
    await response.edit_text(detailed_text)

def register_handlers(app: Client):
    handlers_list = [
        MessageHandler(ping_command, filters.command("ping", prefixes=".") & filters.me),
        MessageHandler(fast_ping_command, filters.command("fastping", prefixes=".") & filters.me),
        MessageHandler(detailed_ping_command, filters.command("detailedping", prefixes=".") & filters.me)
    ]

    for handler in handlers_list:
        app.add_handler(handler)
        
    return handlers_list