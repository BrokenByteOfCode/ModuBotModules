import os
import google.generativeai as genai
from google.generativeai.types import HarmCategory, HarmBlockThreshold
from pyrogram import Client, filters
from pyrogram.handlers import MessageHandler
from pyrogram.types import Message
from pathlib import Path
from dotenv import load_dotenv, set_key, find_dotenv

model = None
chat_sessions = {}
safety_settings = {
    HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
    HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
    HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,
    HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
}

def initialize_gemini():
    global model
    load_dotenv()
    
    api_key = os.environ.get("GEMINI_API_KEY")
    if not api_key:
        print("GEMINI_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É .api")
        model = None
        return False
        
    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel(
            'gemini-1.5-flash',
            safety_settings=safety_settings
        )
        print("–ú–æ–¥—É–ª—å Gemini AI —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –±–µ–∑–ø–µ–∫–∏.")
        return True
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Gemini: {e}")
        model = None
        return False

async def set_api_key_command(client: Client, message: Message):
    global model
    
    if len(message.command) < 2:
        await message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à API –∫–ª—é—á.\n"
            "–ü—Ä–∏–∫–ª–∞–¥: `.api YOUR_API_KEY`\n\n"
            "–í–∞—à –∫–ª—é—á –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª `.env`."
        )
        return

    new_api_key = message.command[1]
    
    dotenv_path = find_dotenv()
    if not dotenv_path:
        dotenv_path = os.path.join(os.getcwd(), '.env')

    try:
        set_key(dotenv_path, "GEMINI_API_KEY", new_api_key)
        await message.reply_text("`API –∫–ª—é—á –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—é –º–æ–¥–µ–ª—å...`")

        if initialize_gemini():
            await message.reply_text("‚úÖ **–£—Å–ø—ñ—Ö!** –ú–æ–¥–µ–ª—å Gemini –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.")
        else:
            await message.reply_text("‚ùå **–ü–æ–º–∏–ª–∫–∞.** –ö–ª—é—á –∑–±–µ—Ä–µ–∂–µ–Ω–æ, –∞–ª–µ –º–æ–¥–µ–ª—å –Ω–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏. –ú–æ–∂–ª–∏–≤–æ, –∫–ª—é—á –Ω–µ–¥—ñ–π—Å–Ω–∏–π.")
            
    except Exception as e:
        await message.reply_text(f"**–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–ª—é—á:**\n`{e}`")

async def clear_memory_command(client: Client, message: Message):
    chat_id = message.chat.id
    if chat_id in chat_sessions:
        del chat_sessions[chat_id]
        await message.reply_text("üßπ **–ü–∞–º'—è—Ç—å –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É –æ—á–∏—â–µ–Ω–æ.**")
        print(f"–°–µ—Å—ñ—é —á–∞—Ç—É –æ—á–∏—â–µ–Ω–æ –¥–ª—è ID: {chat_id}")
    else:
        await message.reply_text("ü§î –î–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó.")

async def ai_command(client: Client, message: Message):
    if not model:
        await message.reply_text(
            "–ü–æ–º–∏–ª–∫–∞: –ú–æ–¥—É–ª—å Gemini AI –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.\n"
            "–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å API –∫–ª—é—á, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –º–µ–Ω—ñ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n"
            "`.api –í–ê–®_–ö–õ–Æ–ß`"
        )
        return

    if len(message.command) < 2 and not (message.reply_to_message and message.reply_to_message.media):
        await message.reply_text(
            "–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è `.ai` –∞–±–æ –¥–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ñ–∞–π–ª —Ü—ñ—î—é –∫–æ–º–∞–Ω–¥–æ—é."
        )
        return

    prompt_text = message.text.split(maxsplit=1)[1] if len(message.command) > 1 else ""
    user_name = message.from_user.first_name
    chat_id = message.chat.id
    
    full_prompt_text = f"{user_name}: {prompt_text}"

    if chat_id not in chat_sessions:
        chat_sessions[chat_id] = model.start_chat(history=[])
        print(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤—É —Å–µ—Å—ñ—é —á–∞—Ç—É –¥–ª—è ID: {chat_id}")

    thinking_message = await message.reply_text("<code>–ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ, –æ–±—Ä–æ–±–ª—è—é...</code>")
    
    file_path = None
    content_for_gemini = [full_prompt_text]

    try:
        if message.reply_to_message and message.reply_to_message.media:
            replied_msg = message.reply_to_message
            if replied_msg.photo or replied_msg.document:
                await thinking_message.edit_text("<code>–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Ñ–∞–π–ª...</code>")
                file_path = await client.download_media(replied_msg)
                await thinking_message.edit_text("<code>–§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –ê–Ω–∞–ª—ñ–∑—É—é...</code>")
                uploaded_file = genai.upload_file(path=file_path)
                content_for_gemini.insert(0, uploaded_file)
            else:
                 await thinking_message.edit_text("<code>–¶–µ–π —Ç–∏–ø —Ñ–∞–π–ª—É –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.</code>")
                 return

        chat_session = chat_sessions[chat_id]
        response = await chat_session.send_message_async(content_for_gemini)
        
        await thinking_message.edit_text(response.text)

    except Exception as e:
        await thinking_message.edit_text(f"**–ü–æ–º–∏–ª–∫–∞ Gemini AI:**\n`{e}`")
        if chat_id in chat_sessions:
            del chat_sessions[chat_id]
            
    finally:
        if file_path and os.path.exists(file_path):
            os.remove(file_path)

def register_handlers(app: Client):
    initialize_gemini()
    
    api_key_handler = MessageHandler(
        set_api_key_command,
        filters.command("api", prefixes=".") & filters.me & filters.private
    )
    
    ai_handler = MessageHandler(
        ai_command,
        filters.command("ai", prefixes=".")
    )
    
    clear_handler = MessageHandler(
        clear_memory_command,
        filters.command("clear", prefixes=".")
    )
    
    handlers_list = [api_key_handler, ai_handler, clear_handler]

    for handler in handlers_list:
        app.add_handler(handler)
        
    return handlers_list