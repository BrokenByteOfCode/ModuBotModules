import random
import io
import time
from gtts import gTTS
from pyrogram import Client, filters
from pyrogram.handlers import MessageHandler
from pyrogram.types import Message
from pyrogram.enums import ParseMode
from art import text2art

async def fun_help_command(client: Client, message: Message):
    help_text = """
**ü•≥ –î–æ—Å—Ç—É–ø–Ω—ñ Fun-–∫–æ–º–∞–Ω–¥–∏:**

`.dicksize` - –î—ñ–∑–Ω–∞–π—Å—è —Å–≤—ñ–π —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —Ä–æ–∑–º—ñ—Ä.
`.rng [min] [max]` - –í–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ –≤ –∑–∞–¥–∞–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ.
`.tts [—Ç–µ–∫—Å—Ç]` - –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
`.coin` - –ü—ñ–¥–∫–∏–Ω—É—Ç–∏ –º–æ–Ω–µ—Ç–∫—É (–û—Ä–µ–ª/–†–µ—à–∫–∞).
`.ball [–ø–∏—Ç–∞–Ω–Ω—è]` - –ú–∞–≥—ñ—á–Ω–∞ –∫—É–ª—è 8, —â–æ –¥–∞—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤—Å–µ.
`.rev [—Ç–µ–∫—Å—Ç]` - –ü–µ—Ä–µ–≤–µ—Ä—Ç–∞—î —Ç–≤—ñ–π —Ç–µ–∫—Å—Ç –∑–∞–¥–æ–º –Ω–∞–ø–µ—Ä–µ–¥.
`.ship` - (—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è) –ü–µ—Ä–µ–≤—ñ—Ä—è—î –ª—é–±–æ–≤–Ω—É —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å.
`.echo [—Ç–µ–∫—Å—Ç]` - –ü–æ–≤—Ç–æ—Ä—é—î —Ç–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
`.mock [—Ç–µ–∫—Å—Ç]` - –ü–µ–†–µ–¢–≤–û—Ä–Æ—î –¢–µ–ö—Å–¢ –í –º–û–∫–Ü–Ω–ì —Å—Ç–∏–ª—å.
`.choose [–≤–∞—Ä—ñ–∞–Ω—Ç1] [–≤–∞—Ä—ñ–∞–Ω—Ç2] ...` - –û–±–∏—Ä–∞—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É.
`.roll [–∫—ñ–ª—å–∫—ñ—Å—Ç—å]d[–≥—Ä–∞–Ω—ñ–≤]` - –ö–∏–¥–∞—î –∫—É–±–∏–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2d6).
`.iq` - –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–≤—ñ–π —Ä—ñ–≤–µ–Ω—å IQ.
`.slot` - –°–ø—Ä–æ–±—É–π —É–¥–∞—á—É –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ñ.
`.ascii [—Ç–µ–∫—Å—Ç]` - –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ç–µ–∫—Å—Ç –≤ ASCII –∞—Ä—Ç.
`.uwu [—Ç–µ–∫—Å—Ç]` - –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ç–µ–∫—Å—Ç –≤ UwU —Å—Ç–∏–ª—å.
`.fortune` - –û—Ç—Ä–∏–º–∞–π –≤–∏–ø–∞–¥–∫–æ–≤–µ –ø—Ä–æ—Ä–æ—Ü—Ç–≤–æ.
`.rate [–æ–±'—î–∫—Ç]` - –û—Ü—ñ–Ω—é—î —â–æ—Å—å –≤—ñ–¥ 1 –¥–æ 10.
`.vibe` - –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–≤—ñ–π —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π.
`.slap` - (—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å) –î–∞—î –ª—è–ø–∞—Å–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.
`.hug` - (—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å) –û–±—ñ–π–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
`.dice` - –ö–∏–¥–∞—î –∑–≤–∏—á–∞–π–Ω–∏–π –∫—É–±–∏–∫ (1-6).
`.percent [—â–æ —Å–∞–º–µ]` - –ü–æ–∫–∞–∑—É—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ —á–æ–≥–æ—Å—å.

**üé≠ RP –ö–æ–º–∞–Ω–¥–∏ (–ø—Ä–∞—Ü—é—é—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É):**
–ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç–æ: –∫—É—Å—å–Ω—É—Ç–∏, –≤–¥–∞—Ä–∏—Ç–∏, –ø–æ—Ü—ñ–ª—É–≤–∞—Ç–∏, –æ–±—ñ–π–Ω—è—Ç–∏, –ø–æ–∫–∞—Ä–∞—Ç–∏, –¥–æ–º—ñ–Ω—É–≤–∞—Ç–∏, 
–∑–º—É—Å–∏—Ç–∏, —Ç—Ä–∞—Ö–Ω—É—Ç–∏, –≤–±–∏—Ç–∏, –ª–∏–∑–Ω—É—Ç–∏, –ø–æ–≥–ª–∞–¥–∏—Ç–∏, —à–ª—å–æ–ø–Ω—É—Ç–∏, –∑–∞–¥—É—à–∏—Ç–∏, –∑–Ω–∏—â–∏—Ç–∏, 
—Ä–æ–∑—ñ—Ä–≤–∞—Ç–∏, —Ä–æ–∑–¥–∞–≤–∏—Ç–∏, —Å–ø–∞–ª–∏—Ç–∏, –∑–∞–º–æ—Ä–æ–∑–∏—Ç–∏, –≤–∫—Ä–∞—Å—Ç–∏, –ø–æ–≥—Ä–∞–±—É–≤–∞—Ç–∏ —Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ!
"""
    await message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

async def tts_command(client: Client, message: Message):
    if len(message.command) < 2:
        return await message.reply_text("–í–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–µ–Ω–Ω—è.")

    text_to_speak = message.text.split(maxsplit=1)[1]
    status_message = await message.reply_text("üéôÔ∏è –ì–µ–Ω–µ—Ä—É—é –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")

    try:
        audio_fp = io.BytesIO()
        tts = gTTS(text=text_to_speak, lang='uk')
        tts.write_to_fp(audio_fp)
        audio_fp.seek(0)
        audio_fp.name = 'voice.ogg'

        await client.send_voice(
            chat_id=message.chat.id,
            voice=audio_fp,
            reply_to_message_id=message.id
        )
        await status_message.delete()

    except Exception as e:
        await status_message.edit_text(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞—É–¥—ñ–æ: {e}")

async def dicksize_command(client: Client, message: Message):
    size = random.randint(1, 35)
    await message.reply_text(f"–¢–≤—ñ–π —Ä–æ–∑–º—ñ—Ä —Å—å–æ–≥–æ–¥–Ω—ñ: {size} —Å–º! üòé")

async def rng_command(client: Client, message: Message):
    if len(message.command) != 3:
        return await message.reply_text("–§–æ—Ä–º–∞—Ç: `.rng [min] [max]`")
    try:
        min_val, max_val = int(message.command[1]), int(message.command[2])
    except ValueError:
        return await message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω—ñ —á–∏—Å–ª–∞.")
    if min_val > max_val:
        return await message.reply_text("Min –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–∏–º –∑–∞ Max.")
    random_number = random.randint(min_val, max_val)
    await message.reply_text(
        f"üé≤ –í–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ –≤—ñ–¥ {min_val} –¥–æ {max_val}: **{random_number}**",
        parse_mode=ParseMode.MARKDOWN
    )

async def coin_command(client: Client, message: Message):
    await message.reply_text(
        f"ü™ô –í–∏–ø–∞–ª–æ: **{random.choice(['–û—Ä–µ–ª', '–†–µ—à–∫–∞'])}**",
        parse_mode=ParseMode.MARKDOWN
    )

async def ball_command(client: Client, message: Message):
    if len(message.command) < 2:
        return await message.reply_text("üîÆ –ó–∞–¥–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è –º–∞–≥—ñ—á–Ω—ñ–π –∫—É–ª—ñ!")
    answers = [
        "–ë–µ–∑–ø–µ—Ä–µ—á–Ω–æ.", "–¶–µ —Ç–æ—á–Ω–æ.", "–ë–µ–∑ —Å—É–º–Ω—ñ–≤—ñ–≤.", "–¢–∞–∫, –±–µ–∑—É–º–æ–≤–Ω–æ.",
        "–ú–æ–∂–µ—à –Ω–∞ —Ü–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏.", "–ù–∞—Å–∫—ñ–ª—å–∫–∏ —è –±–∞—á—É, —Ç–∞–∫.", "–ù–∞–π—ñ–º–æ–≤—ñ—Ä–Ω—ñ—à–µ.",
        "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∏ —Ö–æ—Ä–æ—à—ñ.", "–¢–∞–∫.", "–ó–Ω–∞–∫–∏ –∫–∞–∂—É—Ç—å - —Ç–∞–∫.", "–í—ñ–¥–ø–æ–≤—ñ–¥—å —Ç—É–º–∞–Ω–Ω–∞, —Å–ø—Ä–æ–±—É–π —â–µ.",
        "–ó–∞–ø–∏—Ç–∞–π –ø—ñ–∑–Ω—ñ—à–µ.", "–ö—Ä–∞—â–µ –Ω–µ –∫–∞–∑–∞—Ç–∏ —Ç–æ–±—ñ –∑–∞—Ä–∞–∑.", "–ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–¥–±–∞—á–∏—Ç–∏ –∑–∞—Ä–∞–∑.",
        "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä—É–π—Å—è —ñ –∑–∞–ø–∏—Ç–∞–π –∑–Ω–æ–≤—É.", "–ù–∞–≤—ñ—Ç—å –Ω–µ –¥—É–º–∞–π.", "–ú–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å - –Ω—ñ.",
        "–ó–∞ –º–æ—ó–º–∏ –¥–∞–Ω–∏–º–∏ - –Ω—ñ.", "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∏ –Ω–µ –¥—É–∂–µ —Ö–æ—Ä–æ—à—ñ.", "–î—É–∂–µ —Å—É–º–Ω—ñ–≤–Ω–æ."
    ]
    await message.reply_text(f"üé± **{random.choice(answers)}**", parse_mode=ParseMode.MARKDOWN)

async def reverse_command(client: Client, message: Message):
    if len(message.command) < 2:
        return await message.reply_text("–í–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∏.")
    text_to_reverse = message.text.split(maxsplit=1)[1]
    reversed_text = text_to_reverse[::-1]
    await message.reply_text(reversed_text)

async def ship_command(client: Client, message: Message):
    if not message.reply_to_message:
        return await message.reply_text("–¶—é –∫–æ–º–∞–Ω–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

    user1, user2 = message.from_user, message.reply_to_message.from_user
    seed = str(sorted([user1.id, user2.id]))
    random.seed(seed)
    percentage = random.randint(0, 100)

    emoji = "üíî"
    if percentage > 40: emoji = "‚ù§Ô∏è"
    if percentage > 75: emoji = "üíû"
    if percentage == 100: emoji = "üíç"

    await message.reply_text(
        f"–°—É–º—ñ—Å–Ω—ñ—Å—Ç—å –º—ñ–∂ {user1.first_name} —Ç–∞ {user2.first_name}:\n`{percentage}%` {emoji}",
        parse_mode=ParseMode.MARKDOWN
    )

async def echo_command(client: Client, message: Message):
    if len(message.command) < 2:
        return await message.reply_text("–í–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è.")
    text_to_echo = message.text.split(maxsplit=1)[1]
    await message.reply_text(text_to_echo)

async def mock_command(client: Client, message: Message):
    if len(message.command) < 2:
        return await message.reply_text("–í–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ –º–æ–∫—ñ–Ω–≥ —Å—Ç–∏–ª—å.")
    text = message.text.split(maxsplit=1)[1]
    mocked_text = ''.join(char.upper() if i % 2 == 0 else char.lower() for i, char in enumerate(text))
    await message.reply_text(mocked_text)

async def choose_command(client: Client, message: Message):
    if len(message.command) < 3:
        return await message.reply_text("–í–∫–∞–∂—ñ—Ç—å –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –¥–≤–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–ª—è –≤–∏–±–æ—Ä—É.")
    choices = message.command[1:]
    chosen = random.choice(choices)
    await message.reply_text(f"üéØ –Ø –æ–±–∏—Ä–∞—é: **{chosen}**", parse_mode=ParseMode.MARKDOWN)

async def roll_command(client: Client, message: Message):
    if len(message.command) < 2:
        return await message.reply_text("–§–æ—Ä–º–∞—Ç: `.roll [–∫—ñ–ª—å–∫—ñ—Å—Ç—å]d[–≥—Ä–∞–Ω—ñ–≤]` (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2d6)")
    
    dice_notation = message.command[1]
    try:
        if 'd' not in dice_notation:
            raise ValueError
        count, sides = dice_notation.split('d')
        count, sides = int(count), int(sides)
        if count <= 0 or sides <= 0 or count > 20:
            raise ValueError
    except ValueError:
        return await message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–∫–ª–∞–¥: 2d6")
    
    rolls = [random.randint(1, sides) for _ in range(count)]
    total = sum(rolls)
    
    if count == 1:
        result = f"üé≤ –í–∏–ø–∞–ª–æ: **{total}**"
    else:
        result = f"üé≤ –ö–∏–Ω—É–≤ {count}d{sides}: {rolls}\n–°—É–º–∞: **{total}**"
    
    await message.reply_text(result, parse_mode=ParseMode.MARKDOWN)

async def iq_command(client: Client, message: Message):
    user_id = message.from_user.id
    random.seed(f"iq_{user_id}")
    iq = random.randint(50, 200)
    
    if iq < 70: emoji = "ü§°"
    elif iq < 90: emoji = "üòÖ"
    elif iq < 110: emoji = "üôÇ"
    elif iq < 130: emoji = "ü§ì"
    elif iq < 160: emoji = "üß†"
    else: emoji = "üöÄ"
    
    await message.reply_text(f"–¢–≤—ñ–π IQ: **{iq}** {emoji}", parse_mode=ParseMode.MARKDOWN)

async def slot_command(client: Client, message: Message):
    symbols = ['üçé', 'üçä', 'üçã', 'üçá', 'üçí', 'üîî', 'üíé', '7Ô∏è‚É£']
    reels = [random.choice(symbols) for _ in range(3)]
    
    result_text = f"üé∞ {' '.join(reels)}\n\n"
    
    if len(set(reels)) == 1:
        result_text += "üéâ **–î–ñ–ï–ö–ü–û–¢!** –í—Å—ñ —Å–∏–º–≤–æ–ª–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ!"
    elif len(set(reels)) == 2:
        result_text += "‚ú® –î–≤–∞ –æ–¥–Ω–∞–∫–æ–≤–∏—Ö! –ù–µ–ø–æ–≥–∞–Ω–æ!"
    else:
        result_text += "üòî –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!"
    
    await message.reply_text(result_text, parse_mode=ParseMode.MARKDOWN)

async def ascii_command(client: Client, message: Message):
    if len(message.command) < 2:
        return await message.reply_text("–í–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è ASCII –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è.")
    
    text = message.text.split(maxsplit=1)[1]
    if len(text) > 15:
        return await message.reply_text("–¢–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π! –ú–∞–∫—Å–∏–º—É–º 15 —Å–∏–º–≤–æ–ª—ñ–≤.")
    
    try:
        fonts = ['small', 'block', 'digital', '3-d', 'mini', 'script', 'slant']
        font = random.choice(fonts)
        ascii_art = text2art(text, font=font)
        
        if len(ascii_art) > 4000:
            ascii_art = text2art(text, font='mini')
        
        await message.reply_text(f"```\n{ascii_art}\n```", parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        simple_ascii = f"```\n{text.upper()}\n{'=' * len(text)}\n```"
        await message.reply_text(simple_ascii, parse_mode=ParseMode.MARKDOWN)

async def uwu_command(client: Client, message: Message):
    if len(message.command) < 2:
        return await message.reply_text("–í–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è UwU –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è.")
    
    text = message.text.split(maxsplit=1)[1]
    uwu_text = text.replace('r', 'w').replace('R', 'W').replace('–ª', '–≤').replace('–õ', '–í')
    uwu_text += " " + random.choice(['uwu', 'owo', '>w<', 'uwu~', 'owo~'])
    
    await message.reply_text(uwu_text)

async def fortune_command(client: Client, message: Message):
    fortunes = [
        "–¢–≤–æ—ó –∑—É—Å–∏–ª–ª—è –Ω–∞—Ä–µ—à—Ç—ñ –±—É–¥—É—Ç—å –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∂–µ–Ω—ñ.",
        "–í–±–∏–π —Å–µ–±–µ.",
        "–ß–∏ —Ç–æ–±—ñ –∫–æ–ª–∏—Å—å –∫–∞–∑–∞–ª–∏, —â–æ —Ç–∏ —Ç—É–ø–∏–π? –¢–∏ —Ç—É–ø–∏–π.",
        "–ü—ñ—Å—å–∫–∞ —Ç–≤–æ—è –Ω–µ —Ç–∞–∫–∞ –≤–∂–µ –π –≤–µ–ª–∏–∫–∞.",
        "–¢–≤–æ—è –º–∞–º–∞ –ø–∏—à–∞—î—Ç—å—Å—è —Ç–æ–±–æ—é, –∞–ª–µ —Ç–∏ –Ω–µ –∑–∞—Å–ª—É–≥–æ–≤—É—î—à –Ω–∞ —Ü–µ.",
        "–¢–≤–æ—è –¥—ñ–≤—á–∏–Ω–∞ –∑—Ä–∞–¥–∂—É—î —Ç–æ–±—ñ –∑ —Ç–≤–æ—ó–º –¥—Ä—É–≥–æ–º.",
        "–¢–≤—ñ–π –∫—ñ—Ç –¥—É–º–∞—î, —â–æ —Ç–∏ —Ç—É–ø–∏–π.",
        "–¢–≤—ñ–π –ø–µ—Å —Ö–æ—á–µ, —â–æ–± —Ç–∏ –ø–µ—Ä–µ—Å—Ç–∞–≤ –π–æ–≥–æ –¥—Ä–∞—Ç—É–≤–∞—Ç–∏.",
        "–¢–≤—ñ–π –∫–æ–º–ø'—é—Ç–µ—Ä —Å–∫–æ—Ä–æ –∑–ª–∞–º–∞—î—Ç—å—Å—è, —ñ —Ç–∏ –≤—Ç—Ä–∞—Ç–∏—à –≤—Å—ñ –¥–∞–Ω—ñ.",
        "–¢–≤–æ—è —Ä–æ–±–æ—Ç–∞ —Å–∫–æ—Ä–æ —Å—Ç–∞–Ω–µ –Ω—É–¥–Ω–æ—é —ñ –±–µ–∑–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ—é.",
        "–¢–≤–æ—è —É–ª—é–±–ª–µ–Ω–∞ —ó–∂–∞ —Å–∫–æ—Ä–æ —Å—Ç–∞–Ω–µ –Ω–µ—Å–º–∞—á–Ω–æ—é.",
        "–¢–≤—ñ–π —Ç–µ–ª–µ—Ñ–æ–Ω —Å–∫–æ—Ä–æ —Ä–æ–∑—Ä—è–¥–∏—Ç—å—Å—è, —ñ —Ç–∏ –Ω–µ –∑–º–æ–∂–µ—à –π–æ–≥–æ –∑–∞—Ä—è–¥–∏—Ç–∏.",
        "–¢–≤–æ—è —É–ª—é–±–ª–µ–Ω–∞ –≥—Ä–∞ —Å–∫–æ—Ä–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏—Å—è.",
        "–¢–≤–æ—è —É–ª—é–±–ª–µ–Ω–∞ –º—É–∑–∏–∫–∞ —Å–∫–æ—Ä–æ —Å—Ç–∞–Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–ª–æ—é.",
        "–¢–≤–æ—è —É–ª—é–±–ª–µ–Ω–∞ –∫–Ω–∏–≥–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∞.",
    ]
    
    fortune = random.choice(fortunes)
    await message.reply_text(f"üîÆ **–¢–≤–æ—î –ø—Ä–æ—Ä–æ—Ü—Ç–≤–æ:**\n{fortune}", parse_mode=ParseMode.MARKDOWN)

async def rate_command(client: Client, message: Message):
    if len(message.command) < 2:
        return await message.reply_text("–í–∫–∞–∂—ñ—Ç—å, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ—Ü—ñ–Ω–∏—Ç–∏.")
    
    item = message.text.split(maxsplit=1)[1]
    rating = random.randint(1, 10)
    
    if rating <= 3: emoji = "üëé"
    elif rating <= 6: emoji = "üòê"
    elif rating <= 8: emoji = "üëç"
    else: emoji = "üî•"
    
    await message.reply_text(f"–û—Ü—ñ–Ω–∫–∞ –¥–ª—è '{item}': **{rating}/10** {emoji}", parse_mode=ParseMode.MARKDOWN)

async def vibe_command(client: Client, message: Message):
    vibes = [
        ("üò¥", "–°–æ–Ω–ª–∏–≤–∏–π", "–ß–∞—Å –¥–ª—è –∫–∞–≤–∏!"),
        ("üòé", "–ö—Ä—É—Ç–∏–π", "–°—å–æ–≥–æ–¥–Ω—ñ —Ç–≤—ñ–π –¥–µ–Ω—å!"),
        ("ü§™", "–ë–æ–∂–µ–≤—ñ–ª—å–Ω–∏–π", "–ï–Ω–µ—Ä–≥—ñ—è —á–µ—Ä–µ–∑ –∫—Ä–∞–π!"),
        ("üòá", "–°–ø–æ–∫—ñ–π–Ω–∏–π", "–î–∑–µ–Ω-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π."),
        ("ü§î", "–ó–∞–¥—É–º–ª–∏–≤–∏–π", "–§—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–∏–π –Ω–∞—Å—Ç—Ä—ñ–π."),
        ("üî•", "–í–æ–≥–Ω—è–Ω–∏–π", "–ì–æ—Ç–æ–≤–∏–π –ø—ñ–¥–∫–æ—Ä—é–≤–∞—Ç–∏ —Å–≤—ñ—Ç!"),
        ("üåà", "–í–µ—Å–µ–ª–∫–æ–≤–∏–π", "–í—Å–µ –±–∞—Ä–≤–∏ –µ–º–æ—Ü—ñ–π!"),
        ("üí™", "–ú–æ—Ç–∏–≤–æ–≤–∞–Ω–∏–π", "–ù—ñ—â–æ –Ω–µ –∑—É–ø–∏–Ω–∏—Ç—å!"),
    ]
    
    emoji, mood, description = random.choice(vibes)
    await message.reply_text(f"{emoji} **–¢–≤—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π —Å—å–æ–≥–æ–¥–Ω—ñ:** {mood}\n{description}", parse_mode=ParseMode.MARKDOWN)

async def dice_command(client: Client, message: Message):
    result = random.randint(1, 6)
    dice_faces = ['‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ']
    await message.reply_text(f"{dice_faces[result-1]} –í–∏–ø–∞–ª–æ: **{result}**", parse_mode=ParseMode.MARKDOWN)

async def percent_command(client: Client, message: Message):
    if len(message.command) < 2:
        return await message.reply_text("–í–∫–∞–∂—ñ—Ç—å, –≤—ñ–¥—Å–æ—Ç–æ–∫ —á–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–∏.")
    
    item = message.text.split(maxsplit=1)[1]
    percentage = random.randint(0, 100)
    
    await message.reply_text(f"üìä {item}: **{percentage}%**", parse_mode=ParseMode.MARKDOWN)

async def rp_action_handler(client: Client, message: Message):
    if not message.reply_to_message:
        return
    
    lines = message.text.strip().split('\n')
    first_line = lines[0].lower().strip()
    
    actor = message.from_user.first_name
    target = message.reply_to_message.from_user.first_name
    
    rp_actions = {
        "–∫—É—Å—å–Ω—É—Ç–∏": ("ü¶∑", ["—É–∫—É—Å–∏–≤", "–∫—É—Å—å–Ω—É–≤", "–≤–∫—É—Å–∏–≤", "–ø—Ä–∏–∫—É—Å–∏–≤"]),
        "–≤–¥–∞—Ä–∏—Ç–∏": ("üëä", ["–≤–¥–∞—Ä–∏–≤", "–∑–∞–ª—É–ø–∏–≤", "–¥–∞–≤ –≤ –ø–∏–∫—É", "—à–∞—Ä–∞—Ö–Ω—É–≤"]),
        "–ø–æ—Ü—ñ–ª—É–≤–∞—Ç–∏": ("üíã", ["–ø–æ—Ü—ñ–ª—É–≤–∞–≤", "—á–º–æ–∫–Ω—É–≤", "–¥–∞–≤ –ø–æ—Ü—ñ–ª—É–Ω–æ–∫", "–ø–æ—Ü—ñ–ª—É–≤–∞–≤ –≤ –≥—É–±–∏"]),
        "–æ–±—ñ–π–Ω—è—Ç–∏": ("ü§ó", ["–æ–±—ñ–π–Ω—è–≤", "–ø—Ä–∏—Ç–∏—Å–Ω—É–≤ –¥–æ —Å–µ–±–µ", "–º—ñ—Ü–Ω–æ –æ–±—ñ–π–Ω—è–≤"]),
        "–ø–æ–∫–∞—Ä–∞—Ç–∏": ("‚ö°", ["–ø–æ–∫–∞—Ä–∞–≤", "–Ω–∞–∫–∞–∑–∞–≤", "–¥–∞–≤ —É—Ä–æ–∫", "–≤–∏—Ö–æ–≤–∞–≤"]),
        "–¥–æ–º—ñ–Ω—É–≤–∞—Ç–∏": ("üëë", ["–¥–æ–º—ñ–Ω—É–≤–∞–≤ –Ω–∞–¥", "–ø—ñ–¥–∫–æ—Ä–∏–≤", "–∫–µ—Ä—É–≤–∞–≤", "–ø–∞–Ω—É–≤–∞–≤ –Ω–∞–¥"]),
        "–∑–º—É—Å–∏—Ç–∏": ("‚õìÔ∏è", ["–∑–º—É—Å–∏–≤", "–ø—Ä–∏–Ω–µ–≤–æ–ª–∏–≤", "–ø—Ä–∏–º—É—Å–∏–≤", "–Ω–∞–∫–∞–∑–∞–≤"]),
        "—Ç—Ä–∞—Ö–Ω—É—Ç–∏": ("üîû", ["—Ç—Ä–∞—Ö–Ω—É–≤", "–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤", "–≤–∑—è–≤", "–≤—ñ–¥—ñ–º—ñ–≤"]),
        "–≤–±–∏—Ç–∏": ("üíÄ", ["–≤–±–∏–≤", "–ø—Ä–∏–∫—ñ–Ω—á–∏–≤", "–∑–Ω–∏—â–∏–≤", "—É–±–∏–≤"]),
        "–ª–∏–∑–Ω—É—Ç–∏": ("üëÖ", ["–ª–∏–∑–Ω—É–≤", "–æ–±–ª–∏–∑–∞–≤", "—è–∑–∏–∫–æ–º –ø—Ä–æ–≤—ñ–≤"]),
        "–ø–æ–≥–ª–∞–¥–∏—Ç–∏": ("‚úã", ["–ø–æ–≥–ª–∞–¥–∏–≤", "–ø—Ä–æ–≤—ñ–≤ —Ä—É–∫–æ—é", "–ø—Ä–∏–ª–∞—Å–∫–∞–≤"]),
        "—à–ª—å–æ–ø–Ω—É—Ç–∏": ("üëã", ["—à–ª—å–æ–ø–Ω—É–≤", "–¥–∞–≤ –ª—è–ø–∞—Å–∞", "—É–¥–∞—Ä–∏–≤ –¥–æ–ª–æ–Ω–µ—é"]),
        "–∑–∞–¥—É—à–∏—Ç–∏": ("ü§ê", ["–∑–∞–¥—É—à–∏–≤", "—Å—Ç–∏—Å–Ω—É–≤ –≥–æ—Ä–ª–æ", "–ø–æ—á–∞–≤ –¥—É—à–∏—Ç–∏"]),
        "–∑–Ω–∏—â–∏—Ç–∏": ("üí•", ["–∑–Ω–∏—â–∏–≤", "—Ä–æ–∑–Ω—ñ—Å", "—Å—Ç–µ—Ä –∑ –ª–∏—Ü—è –∑–µ–º–ª—ñ"]),
        "—Ä–æ–∑—ñ—Ä–≤–∞—Ç–∏": ("üí¢", ["—Ä–æ–∑—ñ—Ä–≤–∞–≤", "—Ä–æ–∑—à–º–∞—Ç—É–≤–∞–≤", "–ø–æ—Ä–≤–∞–≤ –Ω–∞ —à–º–∞—Ç–∫–∏"]),
        "—Ä–æ–∑–¥–∞–≤–∏—Ç–∏": ("üóø", ["—Ä–æ–∑–¥–∞–≤–∏–≤", "—Ä–æ–∑–ø–ª—é—â–∏–≤", "—Å—Ç–∏—Å–Ω—É–≤"]),
        "—Å–ø–∞–ª–∏—Ç–∏": ("üî•", ["—Å–ø–∞–ª–∏–≤", "–ø—ñ–¥–ø–∞–ª–∏–≤", "–æ–±–ø—ñ–∫", "–æ–±–≥–æ—Ä—ñ–≤"]),
        "–∑–∞–º–æ—Ä–æ–∑–∏—Ç–∏": ("‚ùÑÔ∏è", ["–∑–∞–º–æ—Ä–æ–∑–∏–≤", "–ø–æ–∫—Ä–∏–≤ –ª—å–æ–¥–æ–º", "—Å–∫—É–≤–∞–≤ —Ö–æ–ª–æ–¥–æ–º"]),
        "–≤–∫—Ä–∞—Å—Ç–∏": ("ü¶π", ["–≤–∫—Ä–∞–≤", "–ø–æ—Ü—É–ø–∏–≤", "—É–∫—Ä–∞–≤", "–∑–∞–±—Ä–∞–≤"]),
        "–ø–æ–≥—Ä–∞–±—É–≤–∞—Ç–∏": ("üí∞", ["–ø–æ–≥—Ä–∞–±—É–≤–∞–≤", "–æ–±—ñ–±—Ä–∞–≤", "–æ–±—á–∏—Å—Ç–∏–≤"]),
        "–ª—è–≥–∞—Ç–∏": ("üõèÔ∏è", ["–ª—ñ–≥ –Ω–∞", "–∑–∞–≤–∞–ª–∏–≤—Å—è –Ω–∞", "–ø—Ä–∏—Ç–∏—Å–Ω—É–≤"]),
        "—Å—ñ—Å—Ç–∏": ("üí∫", ["—Å—ñ–≤ –Ω–∞", "–ø—Ä–∏—Å—ñ–≤ –Ω–∞", "—Ä–æ–∑—Ç–∞—à—É–≤–∞–≤—Å—è –Ω–∞"]),
        "–≤–∑—è—Ç–∏": ("‚úä", ["–≤–∑—è–≤", "—Å—Ö–æ–ø–∏–≤", "–∑–∞—Ö–æ–ø–∏–≤", "–ø—ñ–¥—Ö–æ–ø–∏–≤"]),
        "–∫–∏–Ω—É—Ç–∏": ("üéØ", ["–∫–∏–Ω—É–≤", "—à–≤—ã—Ä–Ω—É–≤", "–º–µ—Ç–Ω—É–≤", "–∑–∞–ø—É—Å—Ç–∏–≤"]),
        "—à—Ç–æ–≤—Ö–Ω—É—Ç–∏": ("üëê", ["—à—Ç–æ–≤—Ö–Ω—É–≤", "–ø—Ö–Ω—É–≤", "–≤—ñ–¥—à—Ç–æ–≤—Ö–Ω—É–≤"]),
        "–ø–æ—Ç—è–≥–Ω—É—Ç–∏": ("ü§ú", ["–ø–æ—Ç—è–≥–Ω—É–≤", "–≤–∏—Ç—è–≥–Ω—É–≤", "–ø–æ—Ç—è–≥ –∑–∞ —Å–æ–±–æ—é"]),
        "–ø—ñ–¥–Ω—è—Ç–∏": ("üèãÔ∏è", ["–ø—ñ–¥–Ω—è–≤", "–ø—ñ–¥—Ç—è–≥–Ω—É–≤", "–≤–∏—Ç—è–≥", "–ø—ñ–¥–Ω—ñ–º–∞–≤"]),
        "–∫–∏–¥–∞—Ç–∏": ("üí•", ["–∫–∏–¥–∞–≤", "–º–µ—Ç–∞–≤", "—à–≤–∏—Ä—è–≤ —É"]),
        "–≤—ñ–¥–ª—É–ø–∏—Ç–∏": ("ü•ä", ["–≤—ñ–¥–ª—É–ø–∏–≤", "–≤—ñ–¥–º—É—Ç—É–∑–∏–≤", "–≤—ñ–¥—Ç—É–∑–∏–≤"]),
        "–º–æ—Ä–¥—É–≤–∞—Ç–∏": ("üò§", ["–º–æ—Ä–¥—É–≤–∞–≤", "–±–∏–≤ –ø–æ –º–æ—Ä–¥—ñ", "–∑—Ä–∏–≤ –±–∞—à–Ω—é"]),
        "—Ö–∞–ø–∞—Ç–∏": ("üë∫", ["—Ö–∞–ø–∞–≤", "—Ö–≤–∞—Ç–∞–≤", "–ª–æ–≤–∏–≤", "—Ç—Ä–∏–º–∞–≤"]),
        "–∫—É—Å–∞—Ç–∏": ("ü¶à", ["–∫—É—Å–∞–≤", "–≥—Ä–∏–∑", "–∂—É–≤–∞–≤"]),
        "–¥—É—à–∏—Ç–∏": ("ü§´", ["–¥—É—à–∏–≤", "—Å—Ç–∏—Å–∫–∞–≤ —à–∏—é", "–Ω–µ –¥–∞–≤–∞–≤ –¥–∏—Ö–∞—Ç–∏"]),
        "—Ä–≤–∞—Ç–∏": ("üå™Ô∏è", ["—Ä–≤–∞–≤", "—à–º–∞—Ç—É–≤–∞–≤", "—Ä–æ–∑—Ä–∏–≤–∞–≤"]),
        "–ø–∞–ª–∏—Ç–∏": ("üî•", ["–ø–∞–ª–∏–≤", "–ø—ñ–¥–ø–∞–ª—é–≤–∞–≤", "–∂–∞—Ä–∏–≤"]),
        "–º–æ—Ä–æ–∑–∏—Ç–∏": ("üßä", ["–º–æ—Ä–æ–∑–∏–≤", "—Å—Ç—É–¥–∏–≤", "–æ—Ö–æ–ª–æ–¥–∂—É–≤–∞–≤"])
    }
    
    for keyword, (emoji, actions) in rp_actions.items():
        if keyword in first_line:
            action = random.choice(actions)
            response_text = f"{emoji} **{actor}** {action} **{target}**!"
            
            rest_text = first_line.replace(keyword, '').strip()
            if len(lines) > 1:
                additional_text = '\n'.join(lines[1:]).strip()
                if rest_text:
                    response_text += f", –∫–∞–∂—É—á–∏ \"{rest_text} {additional_text}\""
                elif additional_text:
                    response_text += f", –∫–∞–∂—É—á–∏ \"{additional_text}\""
            elif rest_text:
                response_text += f", –∫–∞–∂—É—á–∏ \"{rest_text}\""
            
            await message.reply_text(response_text, parse_mode=ParseMode.MARKDOWN)
            return

def register_handlers(app: Client):
    handlers_list = [
        MessageHandler(fun_help_command, filters.command("funhelp", prefixes=".")),
        MessageHandler(dicksize_command, filters.command("dicksize", prefixes=".")),
        MessageHandler(rng_command, filters.command("rng", prefixes=".")),
        MessageHandler(tts_command, filters.command("tts", prefixes=".")),
        MessageHandler(coin_command, filters.command("coin", prefixes=".")),
        MessageHandler(ball_command, filters.command("ball", prefixes=".")),
        MessageHandler(reverse_command, filters.command("rev", prefixes=".")),
        MessageHandler(ship_command, filters.command("ship", prefixes=".")),
        MessageHandler(echo_command, filters.command("echo", prefixes=".")),
        MessageHandler(mock_command, filters.command("mock", prefixes=".")),
        MessageHandler(choose_command, filters.command("choose", prefixes=".")),
        MessageHandler(roll_command, filters.command("roll", prefixes=".")),
        MessageHandler(iq_command, filters.command("iq", prefixes=".")),
        MessageHandler(slot_command, filters.command("slot", prefixes=".")),
        MessageHandler(ascii_command, filters.command("ascii", prefixes=".")),
        MessageHandler(uwu_command, filters.command("uwu", prefixes=".")),
        MessageHandler(fortune_command, filters.command("fortune", prefixes=".")),
        MessageHandler(rate_command, filters.command("rate", prefixes=".")),
        MessageHandler(vibe_command, filters.command("vibe", prefixes=".")),
        MessageHandler(dice_command, filters.command("dice", prefixes=".")),
        MessageHandler(percent_command, filters.command("percent", prefixes=".")),
        MessageHandler(rp_action_handler, filters.text & filters.reply)
    ]
    return handlers_list