import random
import io
from gtts import gTTS
from pyrogram import Client, filters
from pyrogram.handlers import MessageHandler
from pyrogram.types import Message

async def fun_help_command(client: Client, message: Message):
    help_text = """
**ü•≥ –î–æ—Å—Ç—É–ø–Ω—ñ Fun-–∫–æ–º–∞–Ω–¥–∏:**

`<code>.dicksize</code>` - –î—ñ–∑–Ω–∞–π—Å—è —Å–≤—ñ–π —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —Ä–æ–∑–º—ñ—Ä.

`<code>.rng [min] [max]</code>` - –í–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ –≤ –∑–∞–¥–∞–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ.
*–ü—Ä–∏–∫–ª–∞–¥:* `.rng 1 100`

`<code>.tts [—Ç–µ–∫—Å—Ç]</code>` - –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–º–æ–≤–∞: —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞).
*–ü—Ä–∏–∫–ª–∞–¥:* `.tts –ø—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏`
"""
    await message.reply_text(help_text, parse_mode="markdown")


async def dicksize_command(client: Client, message: Message):
    size = random.randint(1, 35)
    await message.reply_text(f"–¢–≤—ñ–π —Ä–æ–∑–º—ñ—Ä —Å—å–æ–≥–æ–¥–Ω—ñ: {size} —Å–º")


async def rng_command(client: Client, message: Message):
    if len(message.command) != 3:
        await message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: `.rng [min] [max]`")
        return

    try:
        min_val = int(message.command[1])
        max_val = int(message.command[2])
    except ValueError:
        await message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω—ñ —á–∏—Å–ª–∞.")
        return

    if min_val > max_val:
        await message.reply_text("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–∏–º –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ.")
        return

    random_number = random.randint(min_val, max_val)
    await message.reply_text(f"üé≤ –í–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ –≤—ñ–¥ {min_val} –¥–æ {max_val}: **{random_number}**")


async def tts_command(client: Client, message: Message):
    if len(message.command) < 2:
        await message.reply_text("–í–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ –≥–æ–ª–æ—Å.\n–ü—Ä–∏–∫–ª–∞–¥: `.tts –ü—Ä–∏–≤—ñ—Ç, —Å–≤—ñ—Ç`")
        return

    text_to_speak = message.text.split(maxsplit=1)[1]
    
    status_message = await message.reply_text("üéôÔ∏è –ì–µ–Ω–µ—Ä—É—é –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")

    try:
        audio_fp = io.BytesIO()
        tts = gTTS(text=text_to_speak, lang='uk')
        tts.write_to_fp(audio_fp)
        audio_fp.seek(0)

        await client.send_voice(
            chat_id=message.chat.id,
            voice=audio_fp,
            reply_to_message_id=message.id
        )
        await status_message.delete()

    except Exception as e:
        await status_message.edit_text(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞—É–¥—ñ–æ: {e}")

def register_handlers(app: Client):
    fun_help_handler = MessageHandler(
        fun_help_command,
        filters.command("funhelp", prefixes=".")
    )
    
    dicksize_handler = MessageHandler(
        dicksize_command,
        filters.command("dicksize", prefixes=".")
    )
    
    rng_handler = MessageHandler(
        rng_command,
        filters.command("rng", prefixes=".")
    )
    
    tts_handler = MessageHandler(
        tts_command,
        filters.command("tts", prefixes=".")
    )

    handlers_list = [fun_help_handler, dicksize_handler, rng_handler, tts_handler]

    for handler in handlers_list:
        app.add_handler(handler)
        
    return handlers_list