import random
import io
import os
import wave
import dotenv
from gtts import gTTS

import google.generativeai as genai

from pyrogram import Client, filters
from pyrogram.handlers import MessageHandler
from pyrogram.types import Message
from pyrogram.enums import ParseMode

dotenv.load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if GEMINI_API_KEY:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
    except Exception as e:
        print(f"–ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ Gemini API: {e}")
        GEMINI_API_KEY = None

async def fun_help_command(client: Client, message: Message):
    help_text = """
**ü•≥ –î–æ—Å—Ç—É–ø–Ω—ñ Fun-–∫–æ–º–∞–Ω–¥–∏:**

`.dicksize` - –î—ñ–∑–Ω–∞–π—Å—è —Å–≤—ñ–π —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —Ä–æ–∑–º—ñ—Ä.
`.rng [min] [max]` - –í–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ –≤ –∑–∞–¥–∞–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ.
`.tts [—Ç–µ–∫—Å—Ç]` - –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (Gemini / gTTS).
`.coin` - –ü—ñ–¥–∫–∏–Ω—É—Ç–∏ –º–æ–Ω–µ—Ç–∫—É (–û—Ä–µ–ª/–†–µ—à–∫–∞).
`.ball [–ø–∏—Ç–∞–Ω–Ω—è]` - –ú–∞–≥—ñ—á–Ω–∞ –∫—É–ª—è 8, —â–æ –¥–∞—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤—Å–µ.
`.rev [—Ç–µ–∫—Å—Ç]` - –ü–µ—Ä–µ–≤–µ—Ä—Ç–∞—î —Ç–≤—ñ–π —Ç–µ–∫—Å—Ç –∑–∞–¥–æ–º –Ω–∞–ø–µ—Ä–µ–¥.
`.ship` - (—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è) –ü–µ—Ä–µ–≤—ñ—Ä—è—î –ª—é–±–æ–≤–Ω—É —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å.
"""
    await message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

async def tts_command(client: Client, message: Message):
    if len(message.command) < 2:
        return await message.reply_text("–í–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–µ–Ω–Ω—è.")

    text_to_speak = message.text.split(maxsplit=1)[1]
    status_message = await message.reply_text("üéôÔ∏è –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É...")

    if GEMINI_API_KEY:
        try:
            await status_message.edit_text("üéôÔ∏è –ì–µ–Ω–µ—Ä—É—é –∞—É–¥—ñ–æ —á–µ—Ä–µ–∑ **Gemini API**...", parse_mode=ParseMode.MARKDOWN)

            model = genai.GenerativeModel(model_name="gemini-2.5-flash-preview-tts")

            voices = ["Zephyr", "Puck", "Charon", "Kore", "Fenrir", "Leda", "Orus", "Aoede", "Callirrhoe"]

            generation_config = {
                "response_modalities": ["AUDIO"],
                "speech_config": {
                    "voice_config": {
                        "prebuilt_voice_config": {
                            "voice_name": random.choice(voices)
                        }
                    }
                }
            }

            response = model.generate_content(
                contents=f"Say cheerfully: {text_to_speak}",
                generation_config=generation_config
            )

            pcm_data = response.candidates[0].content.parts[0].inline_data.data

            audio_fp = io.BytesIO()
            with wave.open(audio_fp, "wb") as wf:
                wf.setnchannels(1)
                wf.setsampwidth(2)
                wf.setframerate(24000)
                wf.writeframes(pcm_data)
            audio_fp.seek(0)
            audio_fp.name = "gemini_voice.wav"

            await client.send_voice(message.chat.id, voice=audio_fp, reply_to_message_id=message.id)
            await status_message.delete()
            return

        except Exception as e:
            await status_message.edit_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ Gemini API: `{e}`\n\nüîÑ –°–ø—Ä–æ–±—É—é —á–µ—Ä–µ–∑ gTTS...")

    try:
        if not GEMINI_API_KEY:
            await status_message.edit_text("üîë API –∫–ª—é—á Gemini –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\nüéôÔ∏è –ì–µ–Ω–µ—Ä—É—é –∞—É–¥—ñ–æ —á–µ—Ä–µ–∑ **gTTS**...", parse_mode=ParseMode.MARKDOWN)

        audio_fp = io.BytesIO()
        tts = gTTS(text=text_to_speak, lang='uk')
        tts.write_to_fp(audio_fp)
        audio_fp.seek(0)
        audio_fp.name = 'gtts_voice.ogg'

        await client.send_voice(message.chat.id, voice=audio_fp, reply_to_message_id=message.id)
        await status_message.delete()

    except Exception as e:
        await status_message.edit_text(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞—É–¥—ñ–æ: {e}")

async def dicksize_command(client: Client, message: Message):
    size = random.randint(1, 35)
    await message.reply_text(f"–¢–≤—ñ–π —Ä–æ–∑–º—ñ—Ä —Å—å–æ–≥–æ–¥–Ω—ñ: {size} —Å–º! üòé")

async def rng_command(client: Client, message: Message):
    if len(message.command) != 3:
        return await message.reply_text("–§–æ—Ä–º–∞—Ç: `.rng [min] [max]`")
    try:
        min_val, max_val = int(message.command[1]), int(message.command[2])
    except ValueError:
        return await message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω—ñ —á–∏—Å–ª–∞.")
    if min_val > max_val:
        return await message.reply_text("Min –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–∏–º –∑–∞ Max.")
    random_number = random.randint(min_val, max_val)
    await message.reply_text(
        f"üé≤ –í–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ –≤—ñ–¥ {min_val} –¥–æ {max_val}: **{random_number}**",
        parse_mode=ParseMode.MARKDOWN
    )

async def coin_command(client: Client, message: Message):
    await message.reply_text(
        f"ü™ô –í–∏–ø–∞–ª–æ: **{random.choice(['–û—Ä–µ–ª', '–†–µ—à–∫–∞'])}**",
        parse_mode=ParseMode.MARKDOWN
    )

async def ball_command(client: Client, message: Message):
    if len(message.command) < 2:
        return await message.reply_text("üîÆ –ó–∞–¥–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è –º–∞–≥—ñ—á–Ω—ñ–π –∫—É–ª—ñ!")
    answers = [
        "–ë–µ–∑–ø–µ—Ä–µ—á–Ω–æ.", "–¶–µ —Ç–æ—á–Ω–æ.", "–ë–µ–∑ —Å—É–º–Ω—ñ–≤—ñ–≤.", "–¢–∞–∫, –±–µ–∑—É–º–æ–≤–Ω–æ.",
        "–ú–æ–∂–µ—à –Ω–∞ —Ü–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏.", "–ù–∞—Å–∫—ñ–ª—å–∫–∏ —è –±–∞—á—É, —Ç–∞–∫.", "–ù–∞–π—ñ–º–æ–≤—ñ—Ä–Ω—ñ—à–µ.",
        "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∏ —Ö–æ—Ä–æ—à—ñ.", "–¢–∞–∫.", "–ó–Ω–∞–∫–∏ –∫–∞–∂—É—Ç—å - —Ç–∞–∫.", "–í—ñ–¥–ø–æ–≤—ñ–¥—å —Ç—É–º–∞–Ω–Ω–∞, —Å–ø—Ä–æ–±—É–π —â–µ.",
        "–ó–∞–ø–∏—Ç–∞–π –ø—ñ–∑–Ω—ñ—à–µ.", "–ö—Ä–∞—â–µ –Ω–µ –∫–∞–∑–∞—Ç–∏ —Ç–æ–±—ñ –∑–∞—Ä–∞–∑.", "–ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–¥–±–∞—á–∏—Ç–∏ –∑–∞—Ä–∞–∑.",
        "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä—É–π—Å—è —ñ –∑–∞–ø–∏—Ç–∞–π –∑–Ω–æ–≤—É.", "–ù–∞–≤—ñ—Ç—å –Ω–µ –¥—É–º–∞–π.", "–ú–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å - –Ω—ñ.",
        "–ó–∞ –º–æ—ó–º–∏ –¥–∞–Ω–∏–º–∏ - –Ω—ñ.", "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∏ –Ω–µ –¥—É–∂–µ —Ö–æ—Ä–æ—à—ñ.", "–î—É–∂–µ —Å—É–º–Ω—ñ–≤–Ω–æ."
    ]
    await message.reply_text(f"üé± **{random.choice(answers)}**", parse_mode=ParseMode.MARKDOWN)

async def reverse_command(client: Client, message: Message):
    if len(message.command) < 2:
        return await message.reply_text("–í–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∏.")
    text_to_reverse = message.text.split(maxsplit=1)[1]
    reversed_text = text_to_reverse[::-1]
    await message.reply_text(reversed_text)

async def ship_command(client: Client, message: Message):
    if not message.reply_to_message:
        return await message.reply_text("–¶—é –∫–æ–º–∞–Ω–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

    user1, user2 = message.from_user, message.reply_to_message.from_user
    seed = str(sorted([user1.id, user2.id]))
    random.seed(seed)
    percentage = random.randint(0, 100)

    emoji = "üíî"
    if percentage > 40: emoji = "‚ù§Ô∏è"
    if percentage > 75: emoji = "üíû"
    if percentage == 100: emoji = "üíç"

    await message.reply_text(
        f"–°—É–º—ñ—Å–Ω—ñ—Å—Ç—å –º—ñ–∂ {user1.first_name} —Ç–∞ {user2.first_name}:\n`{percentage}%` {emoji}",
        parse_mode=ParseMode.MARKDOWN
    )

def register_handlers(app: Client):
    handlers_list = [
        MessageHandler(fun_help_command, filters.command("funhelp", prefixes=".")),
        MessageHandler(dicksize_command, filters.command("dicksize", prefixes=".")),
        MessageHandler(rng_command, filters.command("rng", prefixes=".")),
        MessageHandler(tts_command, filters.command("tts", prefixes=".")),
        MessageHandler(coin_command, filters.command("coin", prefixes=".")),
        MessageHandler(ball_command, filters.command("ball", prefixes=".")),
        MessageHandler(reverse_command, filters.command("rev", prefixes=".")),
        MessageHandler(ship_command, filters.command("ship", prefixes="."))
    ]
    for handler in handlers_list:
        app.add_handler(handler)
    return handlers_list