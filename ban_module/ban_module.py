from pyrogram import Client, filters
from pyrogram.handlers import MessageHandler
from pyrogram.types import Message
from pyrogram.errors import FloodWait, ChatAdminRequired, UserAdminInvalid, PeerIdInvalid
import asyncio
import re

async def ban_command(client: Client, message: Message):
    try:
        if not message.chat or message.chat.type == "private":
            await message.edit_text("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø–∞—Ö/–∫–∞–Ω–∞–ª–∞—Ö")
            return

        admin_status = await client.get_chat_member(message.chat.id, message.from_user.id)
        if admin_status.status not in ["administrator", "creator"]:
            await message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        target_user = None
        reason = "–ü–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –≥—Ä—É–ø–∏"

        if message.reply_to_message:
            target_user = message.reply_to_message.from_user
            if len(message.command) > 1:
                reason = message.text.split(maxsplit=1)[1]
        
        elif len(message.command) > 1:
            user_input = message.text.split()[1]
            
            if user_input.startswith('@'):
                username = user_input[1:]
                try:
                    target_user = await client.get_users(username)
                except PeerIdInvalid:
                    await message.edit_text(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                    return
            
            elif user_input.isdigit():
                try:
                    target_user = await client.get_users(int(user_input))
                except PeerIdInvalid:
                    await message.edit_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                    return
            
            else:
                await message.edit_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ @username –∞–±–æ ID")
                return
            
            if len(message.command) > 2:
                reason = " ".join(message.command[2:])
        
        else:
            await message.edit_text(
                "‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n"
                "‚Ä¢ `.ban` (—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)\n"
                "‚Ä¢ `.ban @username [–ø—Ä–∏—á–∏–Ω–∞]`\n"
                "‚Ä¢ `.ban user_id [–ø—Ä–∏—á–∏–Ω–∞]`"
            )
            return

        if not target_user:
            await message.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–∞–Ω—É")
            return

        if target_user.id == message.from_user.id:
            await message.edit_text("‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç–∏ —Å–µ–±–µ")
            return

        target_admin_status = await client.get_chat_member(message.chat.id, target_user.id)
        if target_admin_status.status in ["administrator", "creator"]:
            await message.edit_text("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–±–∞–Ω–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        await client.ban_chat_member(message.chat.id, target_user.id)
        
        user_mention = f"@{target_user.username}" if target_user.username else target_user.first_name
        success_message = f"üî® **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–∞–Ω–µ–Ω–∏–π**\n"
        success_message += f"üë§ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {user_mention}\n"
        success_message += f"üÜî **ID:** `{target_user.id}`\n"
        success_message += f"üìù **–ü—Ä–∏—á–∏–Ω–∞:** {reason}\n"
        success_message += f"‚öñÔ∏è **–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä:** {message.from_user.first_name}"
        
        await message.edit_text(success_message)

    except ChatAdminRequired:
        await message.edit_text("‚ùå –ë–æ—Ç –Ω–µ –º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ü—ñ–π –≥—Ä—É–ø—ñ")
    except UserAdminInvalid:
        await message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—ñ—Ö –ø—Ä–∞–≤ –¥–ª—è –±–∞–Ω—É —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    except FloodWait as e:
        await message.edit_text(f"‚è≥ –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {e.x} —Å–µ–∫—É–Ω–¥")
    except Exception as e:
        await message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±–∞–Ω—ñ: {str(e)}")

async def unban_command(client: Client, message: Message):
    try:
        if not message.chat or message.chat.type == "private":
            await message.edit_text("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø–∞—Ö/–∫–∞–Ω–∞–ª–∞—Ö")
            return

        admin_status = await client.get_chat_member(message.chat.id, message.from_user.id)
        if admin_status.status not in ["administrator", "creator"]:
            await message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        target_user = None

        if message.reply_to_message:
            target_user = message.reply_to_message.from_user
        
        elif len(message.command) > 1:
            user_input = message.text.split()[1]
            
            if user_input.startswith('@'):
                username = user_input[1:]
                try:
                    target_user = await client.get_users(username)
                except PeerIdInvalid:
                    await message.edit_text(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                    return
            
            elif user_input.isdigit():
                try:
                    target_user = await client.get_users(int(user_input))
                except PeerIdInvalid:
                    await message.edit_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                    return
            
            else:
                await message.edit_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ @username –∞–±–æ ID")
                return
        
        else:
            await message.edit_text(
                "‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n"
                "‚Ä¢ `.unban` (—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)\n"
                "‚Ä¢ `.unban @username`\n"
                "‚Ä¢ `.unban user_id`"
            )
            return

        if not target_user:
            await message.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ä–æ–∑–±–∞–Ω—É")
            return

        await client.unban_chat_member(message.chat.id, target_user.id)
        
        user_mention = f"@{target_user.username}" if target_user.username else target_user.first_name
        success_message = f"‚úÖ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä–æ–∑–±–∞–Ω–µ–Ω–∏–π**\n"
        success_message += f"üë§ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {user_mention}\n"
        success_message += f"üÜî **ID:** `{target_user.id}`\n"
        success_message += f"‚öñÔ∏è **–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä:** {message.from_user.first_name}"
        
        await message.edit_text(success_message)

    except ChatAdminRequired:
        await message.edit_text("‚ùå –ë–æ—Ç –Ω–µ –º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ü—ñ–π –≥—Ä—É–ø—ñ")
    except UserAdminInvalid:
        await message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—ñ—Ö –ø—Ä–∞–≤ –¥–ª—è —Ä–æ–∑–±–∞–Ω—É —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    except FloodWait as e:
        await message.edit_text(f"‚è≥ –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {e.x} —Å–µ–∫—É–Ω–¥")
    except Exception as e:
        await message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–∞–Ω—ñ: {str(e)}")

def register_handlers(app: Client):
    
    ban_handler = MessageHandler(
        ban_command,
        filters.command("ban", prefixes=".") & filters.me
    )
    
    unban_handler = MessageHandler(
        unban_command,
        filters.command("unban", prefixes=".") & filters.me
    )

    handlers_list = [ban_handler, unban_handler]

    for handler in handlers_list:
        app.add_handler(handler)
        
    return handlers_list