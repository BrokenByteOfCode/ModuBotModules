from pyrogram import Client, filters
from pyrogram.handlers import MessageHandler
from pyrogram.types import Message
from pyrogram.errors import FloodWait, ChatAdminRequired, UserAdminInvalid, PeerIdInvalid, RPCError
import asyncio

async def ban_command(client: Client, message: Message):
    try:
        if not message.chat or message.chat.type == "private":
            await message.edit_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø–∞—Ö")
            return

        target_user = None
        reason = "–ü–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª"

        if message.reply_to_message:
            target_user = message.reply_to_message.from_user
            if len(message.command) > 1:
                reason = message.text.split(maxsplit=1)[1]
        
        elif len(message.command) > 1:
            user_input = message.text.split()[1]
            
            if user_input.startswith('@'):
                username = user_input[1:]
                try:
                    target_user = await client.get_users(username)
                except PeerIdInvalid:
                    await message.edit_text(f"‚ùå @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                    return
                except Exception as e:
                    await message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}")
                    return
            
            elif user_input.isdigit():
                try:
                    target_user = await client.get_users(int(user_input))
                except PeerIdInvalid:
                    await message.edit_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                    return
                except Exception as e:
                    await message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}")
                    return
            
            else:
                await message.edit_text("‚ùå –§–æ—Ä–º–∞—Ç: `.ban @username` –∞–±–æ `.ban ID`")
                return
            
            if len(message.command) > 2:
                reason = " ".join(message.command[2:])
        
        else:
            await message.edit_text(
                "**–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:**\n"
                "‚Ä¢ `.ban` (–≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)\n"
                "‚Ä¢ `.ban @username [–ø—Ä–∏—á–∏–Ω–∞]`\n" 
                "‚Ä¢ `.ban ID [–ø—Ä–∏—á–∏–Ω–∞]`"
            )
            return

        if not target_user:
            await message.edit_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π")
            return

        if target_user.id == message.from_user.id:
            await message.edit_text("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–±–∞–Ω–∏—Ç–∏ —Å–µ–±–µ")
            return

        try:
            await message.chat.ban_member(target_user.id)
        except AttributeError:
            await client.ban_chat_member(message.chat.id, target_user.id)
        
        user_name = f"@{target_user.username}" if target_user.username else target_user.first_name
        
        await message.edit_text(
            f"üî® **–ó–ê–ë–ê–ù–ï–ù–ò–ô**\n"
            f"üë§ {user_name}\n"
            f"üÜî `{target_user.id}`\n"
            f"üìù {reason}"
        )

    except ChatAdminRequired:
        await message.edit_text("‚ùå –ë–æ—Ç –Ω–µ –º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω–∞ –∞–±–æ —Ç–∏ –Ω–µ –∞–¥–º—ñ–Ω")
    except UserAdminInvalid:
        await message.edit_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –±–∞–Ω—É —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    except FloodWait as e:
        await message.edit_text(f"‚è≥ –§–ª—É–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å: {e.x}—Å")
    except RPCError as e:
        await message.edit_text(f"‚ùå Telegram API –ø–æ–º–∏–ª–∫–∞: {e}")
    except Exception as e:
        await message.edit_text(f"‚ùå –ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")

async def unban_command(client: Client, message: Message):
    try:
        if not message.chat or message.chat.type == "private":
            await message.edit_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø–∞—Ö")
            return

        target_user = None

        if message.reply_to_message:
            target_user = message.reply_to_message.from_user
        
        elif len(message.command) > 1:
            user_input = message.text.split()[1]
            
            if user_input.startswith('@'):
                username = user_input[1:]
                try:
                    target_user = await client.get_users(username)
                except PeerIdInvalid:
                    await message.edit_text(f"‚ùå @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                    return
                except Exception as e:
                    await message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}")
                    return
            
            elif user_input.isdigit():
                try:
                    target_user = await client.get_users(int(user_input))
                except PeerIdInvalid:
                    await message.edit_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                    return
                except Exception as e:
                    await message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}")
                    return
            
            else:
                await message.edit_text("‚ùå –§–æ—Ä–º–∞—Ç: `.unban @username` –∞–±–æ `.unban ID`")
                return
        
        else:
            await message.edit_text(
                "**–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:**\n"
                "‚Ä¢ `.unban` (–≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)\n"
                "‚Ä¢ `.unban @username`\n"
                "‚Ä¢ `.unban ID`"
            )
            return

        if not target_user:
            await message.edit_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π")
            return

        try:
            await message.chat.unban_member(target_user.id)
        except AttributeError:
            await client.unban_chat_member(message.chat.id, target_user.id)
        
        user_name = f"@{target_user.username}" if target_user.username else target_user.first_name
        
        await message.edit_text(
            f"‚úÖ **–†–û–ó–ë–ê–ù–ï–ù–ò–ô**\n"
            f"üë§ {user_name}\n"
            f"üÜî `{target_user.id}`"
        )

    except ChatAdminRequired:
        await message.edit_text("‚ùå –ë–æ—Ç –Ω–µ –º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω–∞ –∞–±–æ —Ç–∏ –Ω–µ –∞–¥–º—ñ–Ω")
    except UserAdminInvalid:
        await message.edit_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–æ–∑–±–∞–Ω—É —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    except FloodWait as e:
        await message.edit_text(f"‚è≥ –§–ª—É–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å: {e.x}—Å")
    except RPCError as e:
        await message.edit_text(f"‚ùå Telegram API –ø–æ–º–∏–ª–∫–∞: {e}")
    except Exception as e:
        await message.edit_text(f"‚ùå –ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")

async def kick_command(client: Client, message: Message):
    try:
        if not message.chat or message.chat.type == "private":
            await message.edit_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø–∞—Ö")
            return

        target_user = None

        if message.reply_to_message:
            target_user = message.reply_to_message.from_user
        
        elif len(message.command) > 1:
            user_input = message.text.split()[1]
            
            if user_input.startswith('@'):
                username = user_input[1:]
                try:
                    target_user = await client.get_users(username)
                except PeerIdInvalid:
                    await message.edit_text(f"‚ùå @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                    return
                except Exception as e:
                    await message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}")
                    return
            
            elif user_input.isdigit():
                try:
                    target_user = await client.get_users(int(user_input))
                except PeerIdInvalid:
                    await message.edit_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                    return
                except Exception as e:
                    await message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}")
                    return
            
            else:
                await message.edit_text("‚ùå –§–æ—Ä–º–∞—Ç: `.kick @username` –∞–±–æ `.kick ID`")
                return
        
        else:
            await message.edit_text(
                "**–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:**\n"
                "‚Ä¢ `.kick` (–≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)\n"
                "‚Ä¢ `.kick @username`\n"
                "‚Ä¢ `.kick ID`"
            )
            return

        if not target_user:
            await message.edit_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π")
            return

        if target_user.id == message.from_user.id:
            await message.edit_text("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –∫—ñ–∫–Ω—É—Ç–∏ —Å–µ–±–µ")
            return

        try:
            await message.chat.ban_member(target_user.id)
            await asyncio.sleep(1)
            await message.chat.unban_member(target_user.id)
        except AttributeError:
            await client.ban_chat_member(message.chat.id, target_user.id)
            await asyncio.sleep(1)
            await client.unban_chat_member(message.chat.id, target_user.id)
        
        user_name = f"@{target_user.username}" if target_user.username else target_user.first_name
        
        await message.edit_text(
            f"üë¢ **–ö–Ü–ö–ù–£–¢–ò–ô**\n"
            f"üë§ {user_name}\n"
            f"üÜî `{target_user.id}`"
        )

    except ChatAdminRequired:
        await message.edit_text("‚ùå –ë–æ—Ç –Ω–µ –º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω–∞ –∞–±–æ —Ç–∏ –Ω–µ –∞–¥–º—ñ–Ω")
    except UserAdminInvalid:
        await message.edit_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –∫—ñ–∫–∞ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    except FloodWait as e:
        await message.edit_text(f"‚è≥ –§–ª—É–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å: {e.x}—Å")
    except RPCError as e:
        await message.edit_text(f"‚ùå Telegram API –ø–æ–º–∏–ª–∫–∞: {e}")
    except Exception as e:
        await message.edit_text(f"‚ùå –ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")

def register_handlers(app: Client):
    
    ban_handler = MessageHandler(
        ban_command,
        filters.command("ban", prefixes=".")
    )
    
    unban_handler = MessageHandler(
        unban_command,
        filters.command("unban", prefixes=".")
    )

    kick_handler = MessageHandler(
        kick_command,
        filters.command("kick", prefixes=".")
    )

    handlers_list = [ban_handler, unban_handler, kick_handler]

    for handler in handlers_list:
        app.add_handler(handler)
        
    return handlers_list