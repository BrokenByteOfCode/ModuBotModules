import numpy as np
import io
import logging
import subprocess
from pyrogram import Client, filters
from pyrogram.handlers import MessageHandler

logger = logging.getLogger(__name__)

def apply_authentic_bitcrush_effect(audio_bytes, bit_depth=8, sample_rate_factor=4, drive=1.0, noise_level=0.0):
    try:
        ffmpeg_decode_command = [
            'ffmpeg',
            '-i', 'pipe:0',
            '-f', 's32le',
            '-ac', '1',
            '-ar', '44100',
            'pipe:1'
        ]

        process_decode = subprocess.run(
            ffmpeg_decode_command,
            input=audio_bytes,
            capture_output=True,
            check=True
        )
        raw_audio = process_decode.stdout

    except subprocess.CalledProcessError as e:
        error_message = e.stderr.decode() if e.stderr else "Unknown FFmpeg error during decoding."
        logger.error(f"FFmpeg decode error: {error_message}")
        raise RuntimeError(f"FFmpeg –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—ñ: {error_message}")

    samples = np.frombuffer(raw_audio, dtype=np.int32).astype(np.float64) / (2**31)

    if drive != 1.0:
        samples = np.tanh(samples * drive) * (1.0 / np.tanh(drive))

    target_sample_rate = 44100 // sample_rate_factor
    downsample_indices = np.arange(0, len(samples), sample_rate_factor)
    downsampled = samples[downsample_indices]

    if bit_depth < 32:
        max_amplitude = 2**(bit_depth - 1) - 1
        
        quantized = np.round(downsampled * max_amplitude) / max_amplitude
        
        if bit_depth <= 8:
            quantization_error = quantized - downsampled
            quantized += quantization_error * 0.1
        
        downsampled = quantized

    upsampled = np.repeat(downsampled, sample_rate_factor)
    if len(upsampled) > len(samples):
        upsampled = upsampled[:len(samples)]
    elif len(upsampled) < len(samples):
        upsampled = np.pad(upsampled, (0, len(samples) - len(upsampled)), mode='edge')

    if noise_level > 0:
        noise = np.random.normal(0, noise_level * 0.01, len(upsampled))
        upsampled += noise

    upsampled = np.clip(upsampled, -1.0, 1.0)

    if bit_depth <= 4:
        cutoff = 0.3
    elif bit_depth <= 8:
        cutoff = 0.5
    else:
        cutoff = 0.7
    
    nyquist = 0.5
    filter_order = 6
    from scipy.signal import butter, filtfilt
    b, a = butter(filter_order, cutoff * nyquist, btype='low', analog=False)
    upsampled = filtfilt(b, a, upsampled)

    processed_samples_int16 = (upsampled * 32767).astype(np.int16)
    processed_bytes = processed_samples_int16.tobytes()

    try:
        ffmpeg_encode_command = [
            'ffmpeg',
            '-f', 's16le',
            '-ar', '44100',
            '-ac', '1',
            '-i', 'pipe:0',
            '-f', 'mp3',
            '-b:a', '192k',
            'pipe:1'
        ]

        process_encode = subprocess.run(
            ffmpeg_encode_command,
            input=processed_bytes,
            capture_output=True,
            check=True
        )
        mp3_output = process_encode.stdout

    except subprocess.CalledProcessError as e:
        error_message = e.stderr.decode() if e.stderr else "Unknown FFmpeg error during encoding."
        logger.error(f"FFmpeg encode error: {error_message}")
        raise RuntimeError(f"FFmpeg –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–¥—É–≤–∞–Ω–Ω—ñ: {error_message}")

    output_buffer = io.BytesIO(mp3_output)
    output_buffer.name = "authentic_bitcrushed.mp3"
    output_buffer.seek(0)
    return output_buffer

async def process_audio_for_bitcrush(client, message, bit_depth=8, sample_rate_factor=4, drive=1.0, noise_level=0.0):
    replied_message = message.reply_to_message
    if not replied_message or not (replied_message.audio or replied_message.voice):
        await message.edit_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∞—É–¥—ñ–æ—Ñ–∞–π–ª –∞–±–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return

    await message.edit_text("üéµ –û–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ...")
    
    media_to_download = replied_message.audio or replied_message.voice
    
    downloaded_file = None
    
    try:
        downloaded_file = await client.download_media(media_to_download, in_memory=True)
        await message.edit_text("üîß –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∞–≤—Ç–µ–Ω—Ç–∏—á–Ω–æ–≥–æ bitcrush –µ—Ñ–µ–∫—Ç—É...")
        
        processed_audio_buffer = apply_authentic_bitcrush_effect(
            downloaded_file.getbuffer(), 
            bit_depth, 
            sample_rate_factor, 
            drive, 
            noise_level
        )
        
        await message.edit_text("üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ–≥–æ –∞—É–¥—ñ–æ...")
        
        caption_text = f"üéõ **Authentic Bitcrushed Audio**\n{bit_depth}-bit ‚Ä¢ {sample_rate_factor}x downsample"
        if drive != 1.0:
            caption_text += f" ‚Ä¢ {drive:.1f}x drive"
        if noise_level > 0:
            caption_text += f" ‚Ä¢ {noise_level:.1f}% noise"
        
        await message.reply_document(
            document=processed_audio_buffer,
            caption=caption_text,
            file_name="authentic_bitcrushed.mp3"
        )
        
        await message.delete()

    except Exception as e:
        logger.error(f"Error processing audio for bitcrush: {e}", exc_info=True)
        await message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {str(e)}")
    finally:
        if downloaded_file:
            downloaded_file.close()

async def bitcrush_command(client, message):
    await process_audio_for_bitcrush(client, message, bit_depth=8, sample_rate_factor=4)

async def bitcrush_lofi_command(client, message):
    await process_audio_for_bitcrush(client, message, bit_depth=12, sample_rate_factor=2, drive=1.2, noise_level=0.5)

async def bitcrush_vintage_command(client, message):
    await process_audio_for_bitcrush(client, message, bit_depth=4, sample_rate_factor=8, drive=1.5, noise_level=1.0)

async def bitcrush_extreme_command(client, message):
    await process_audio_for_bitcrush(client, message, bit_depth=2, sample_rate_factor=16, drive=2.0, noise_level=0.3)

async def bitcrush_help_command(client, message):
    help_text = """üéõ **BITCRUSH AUDIO EFFECTS**

**–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**
‚Ä¢ `.bitcrush` - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –µ—Ñ–µ–∫—Ç (8-–±—ñ—Ç, 4x)
‚Ä¢ `.bitcrushlofi` - Lo-Fi –∑–≤—É–∫ (12-–±—ñ—Ç, –¥—Ä–∞–π–≤, —à—É–º)
‚Ä¢ `.bitcrushvintage` - –í—ñ–Ω—Ç–∞–∂–Ω–∏–π –∑–≤—É–∫ (4-–±—ñ—Ç, –≤–∞–∂–∫–∏–π –¥—Ä–∞–π–≤)
‚Ä¢ `.bitcrushextreme` - –ï–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏–π –µ—Ñ–µ–∫—Ç (2-–±—ñ—Ç, –º–∞–∫—Å–∏–º—É–º)

**–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**
‚Ä¢ `.bitcrushcustom <–±—ñ—Ç> <—Å–µ–º–ø–ª> [–¥—Ä–∞–π–≤] [—à—É–º]`
  –ü—Ä–∏–∫–ª–∞–¥: `.bitcrushcustom 6 8 1.8 1.2`

**–ü–∞—Ä–∞–º–µ—Ç—Ä–∏:**
üîπ **–ë—ñ—Ç-–≥–ª–∏–±–∏–Ω–∞ (1-16):** –ö—ñ–ª—å–∫—ñ—Å—Ç—å –±—ñ—Ç –¥–ª—è –∫–≤–∞–Ω—Ç—É–≤–∞–Ω–Ω—è
   ‚Ä¢ 16-12: –í–∏—Å–æ–∫–∞ —è–∫—ñ—Å—Ç—å
   ‚Ä¢ 8-6: –ö–ª–∞—Å–∏—á–Ω–∏–π lo-fi
   ‚Ä¢ 4-2: –°–∏–ª—å–Ω–µ —Å–ø–æ—Ç–≤–æ—Ä–µ–Ω–Ω—è
   ‚Ä¢ 1: –ï–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏–π –µ—Ñ–µ–∫—Ç

üîπ **–°–µ–º–ø–ª-—Ñ–∞–∫—Ç–æ—Ä (1-32):** –ó–º–µ–Ω—à–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü—ñ—ó
   ‚Ä¢ 1-2: –ú'—è–∫–µ –∑–º–µ–Ω—à–µ–Ω–Ω—è
   ‚Ä¢ 4-8: –ü–æ–º—ñ—Ç–Ω–∏–π –µ—Ñ–µ–∫—Ç
   ‚Ä¢ 16-32: –†–∞–¥–∏–∫–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–∏

üîπ **–î—Ä–∞–π–≤ (0.1-3.0):** –ê–Ω–∞–ª–æ–≥–æ–≤–µ –Ω–∞—Å–∏—á–µ–Ω–Ω—è
   ‚Ä¢ 1.0: –ë–µ–∑ –¥—Ä–∞–π–≤—É
   ‚Ä¢ 1.5-2.0: –ú'—è–∫–µ –Ω–∞—Å–∏—á–µ–Ω–Ω—è
   ‚Ä¢ 2.5-3.0: –ñ–æ—Ä—Å—Ç–∫–µ —Å–ø–æ—Ç–≤–æ—Ä–µ–Ω–Ω—è

üîπ **–®—É–º (0-5%):** –ê–Ω–∞–ª–æ–≥–æ–≤—ñ —à—É–º–∏
   ‚Ä¢ 0-0.5%: –¢–æ–Ω–∫–∏–π —à—É–º
   ‚Ä¢ 1-2%: –ü–æ–º—ñ—Ç–Ω–∏–π –≤—ñ–Ω—Ç–∞–∂–Ω–∏–π —à—É–º
   ‚Ä¢ 3-5%: –°–∏–ª—å–Ω–∏–π –∞–Ω–∞–ª–æ–≥–æ–≤—ñ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏

**–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:** –î–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∞—É–¥—ñ–æ—Ñ–∞–π–ª –∞–±–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    
    await message.reply_text(help_text)

async def bitcrush_custom_command(client, message):
    args = message.command[1:]
    if len(args) < 2 or len(args) > 4:
        await message.reply_text(
            "‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `.bitcrushcustom <–≥–ª–∏–±–∏–Ω–∞> <—Å–µ–º–ø–ª—Ä–µ–π—Ç> [–¥—Ä–∞–π–≤] [—à—É–º]`\n"
            "–ü—Ä–∏–∫–ª–∞–¥: `.bitcrushcustom 8 4 1.5 0.8`\n"
            "–ü–∞—Ä–∞–º–µ—Ç—Ä–∏:\n"
            "‚Ä¢ –ì–ª–∏–±–∏–Ω–∞: 1-16 –±—ñ—Ç\n"
            "‚Ä¢ –°–µ–º–ø–ª—Ä–µ–π—Ç: 1-32 (—Ñ–∞–∫—Ç–æ—Ä –∑–º–µ–Ω—à–µ–Ω–Ω—è)\n"
            "‚Ä¢ –î—Ä–∞–π–≤: 0.1-3.0 (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 1.0)\n"
            "‚Ä¢ –®—É–º: 0-5% (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 0)\n\n"
            "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π `.help bitcrush` –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó –¥–æ–≤—ñ–¥–∫–∏"
        )
        return
    
    try:
        bit_depth = int(args[0])
        sample_rate_factor = int(args[1])
        drive = float(args[2]) if len(args) > 2 else 1.0
        noise_level = float(args[3]) if len(args) > 3 else 0.0
        
        if not (1 <= bit_depth <= 16):
            raise ValueError("Bit depth must be 1-16")
        if not (1 <= sample_rate_factor <= 32):
            raise ValueError("Sample rate factor must be 1-32")
        if not (0.1 <= drive <= 3.0):
            raise ValueError("Drive must be 0.1-3.0")
        if not (0 <= noise_level <= 5.0):
            raise ValueError("Noise level must be 0-5%")
            
    except ValueError as ve:
        await message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: {str(ve)}")
        return
        
    await process_audio_for_bitcrush(client, message, bit_depth, sample_rate_factor, drive, noise_level)

def register_handlers(app: Client):
    handlers_list = [
        MessageHandler(bitcrush_command, filters.command("bitcrush", prefixes=".")),
        MessageHandler(bitcrush_lofi_command, filters.command("bitcrushlofi", prefixes=".")),
        MessageHandler(bitcrush_vintage_command, filters.command("bitcrushvintage", prefixes=".")),
        MessageHandler(bitcrush_extreme_command, filters.command("bitcrushextreme", prefixes=".")),
        MessageHandler(bitcrush_custom_command, filters.command("bitcrushcustom", prefixes=".")),
        MessageHandler(bitcrush_help_command, filters.command(["help"], prefixes=".") & filters.text & filters.regex(r"bitcrush"))
    ]

    for handler in handlers_list:
        app.add_handler(handler)
        
    return handlers_list